erbb4
erbb2
suppressMessages(require ("iPAC"))#
suppressMessages(require ("GraphPAC"))#
suppressMessages(require ("SpacePAC"))
sum (mut.data[,1058])
sum (mut.data[,940])
sum (mut.data[,939])
get.SingleLetterCode <-#
function(code){#
  if(code == "GLY"){return ("G")}#
  else if(code == "PRO"){return ("P")}#
  else if(code == "ALA"){return ("A")}#
  else if(code == "VAL"){return ("V")}#
  else if(code == "LEU"){return ("L")}#
  else if(code == "ILE"){return ("I")}#
  else if(code == "MET"){return ("M")}#
  else if(code == "CYS"){return ("C")}#
  else if(code == "PHE"){return ("F")}#
  else if(code == "TYR"){return ("Y")}#
  else if(code == "TRP"){return ("W")}#
  else if(code == "HIS"){return ("H")}#
  else if(code == "LYS"){return ("K")}#
  else if(code == "ARG"){return ("R")}#
  else if(code == "GLN"){return ("Q")}#
  else if(code == "ASN"){return ("N")}#
  else if(code == "GLU"){return ("E")}#
  else if(code == "ASP"){return ("D")}#
  else if(code == "SER"){return ("S")}#
  else if(code == "THR"){return ("T")}#
  else{return("X")}#
}
get.SingleLetterCode ("GLY")
install.packages ("iPAC")
install.packages (source = "iPAC")
install.packages (source = "iPAC/")
library (iPAC)
get.SingleLetterCode
library ("iPAC")
cif <- "3bce-sf.cif"
fasta <- "thomas/review_proteins_positions/ensembl_fasta/ENSP00000269571.fasta"
source ("iPAC/R/get.SingleLetterCode.R")
source ("iPAC/R/get.CIFSequence.Aligned.R")
source ("iPAC/R/get.AlignedPositions.R")
cif
get.AlignedPositions
get.CIFSequence.Aligned (cif A)
head (filedata)
cif <- "3bce.pdb"
filedata<- readLines(cif, n=-1)
filedata
get.CIFSequence.Aligned
AtomCount <- 0#
  N <- 10^5#
  AtomMatrix <- data.frame(SeqId = rep(NA,N), Residue = rep(NA,N), SideChain = rep(NA, N), XCoord = rep(NA,N), YCoord = rep(NA,N), ZCoord = rep(NA,N))#
  atom_site_found = FALSE#
  Atom_Site_Entries <-vector()#
  ModelNumFound = FALSE#
#
  for(i in 1:length(filedata)){#
    if(substring(filedata[i],1,11)=="_atom_site."){#
      atom_site_found = TRUE#
      Atom_Site_Entries <- c(Atom_Site_Entries,scan(text=filedata[i], what="character",quiet = TRUE))#
    }#
    else if(substring(filedata[i],1,1)=="#"){ #We mark both as false to avoid an extra if condition#
      atom_site_found = FALSE#
    }#
    else if(atom_site_found && substring(filedata[i],1,11)!="_atom_site." && substring(filedata[i],1,4)=="ATOM"){#
      items<-unlist(strsplit(filedata[i]," +"))#
      if(ModelNumFound == FALSE){#
        first_model_found = as.numeric(items[which(Atom_Site_Entries == "_atom_site.pdbx_PDB_model_num")])#
        if(is.null(RequiredModelNum)){#
          RequiredModelNum = first_model_found#
        }#
        ModelNumFound = TRUE#
      }#
      if(items[which(Atom_Site_Entries == "_atom_site.auth_asym_id")] == chain_required &&#
         items[which(Atom_Site_Entries == "_atom_site.auth_atom_id")] == "CA" &&#
         as.numeric(items[which(Atom_Site_Entries == "_atom_site.pdbx_PDB_model_num")]) == RequiredModelNum){#
          altID = items[which(Atom_Site_Entries == "_atom_site.label_alt_id")]#
          if(altID == "." || altID =="A"){#
            AtomCount <- AtomCount+1#
            AtomMatrix[AtomCount,] <- c(items[which(Atom_Site_Entries == "_atom_site.label_seq_id")],#
                                        items[which(Atom_Site_Entries == "_atom_site.label_comp_id")],#
                                        items[which(Atom_Site_Entries == "_atom_site.auth_asym_id")],#
                                        items[which(Atom_Site_Entries == "_atom_site.Cartn_x")],#
                                        items[which(Atom_Site_Entries == "_atom_site.Cartn_y")],#
                                        items[which(Atom_Site_Entries == "_atom_site.Cartn_z")])#
          }#
      }#
    }#
  }#
  AtomMatrix<-AtomMatrix[1:AtomCount,]#
  AtomMatrix[,1]<-as.numeric(AtomMatrix[,1])#
  AtomMatrix[,4]<-as.numeric(AtomMatrix[,4])#
  AtomMatrix[,5]<-as.numeric(AtomMatrix[,5])#
  AtomMatrix[,6]<-as.numeric(AtomMatrix[,6])
head (AtomMatrix)
cif <- "3bce.cif"
get.CIFSequence.Aligned (cif, A)
get.CIFSequence.Aligned (cif, "A")
prot.pos <- get.AlignedPositions (cif, fasta, A)
prot.pos <- get.AlignedPositions (cif, fasta, "A")
mut.data <- read.table ("thomas/review_proteins_positions/pipeline/iPAC/tmp_iPAC/matrix_ERBB2.txt", sep = "\t", header = TRUE, row.names = 1)
mut.data <- as.matrix (mut.data)
ClusterFind (mutation.data = mut.data, position.data = prot.pos$Positions, Include.Culled = F, Include.Full = F)
prot.pos
prot.pos$Alignment.Result
res.data <- read.table ("thomas/review_proteins_positions/final_figures/raw_files/matrix_pancan.txt", sep = "\t", header = TRUE)
head (res.data)
head (subset (res.data, AllDriver != "No" & MutSigCV > 0.05 & OncodriveFM > 0.05))
head (subset (res.data, AllDriver != "No" & MutSigCV > 0.05 & OncodriveFM > 0.05 & Detected > 0 & AllDriver %in% c ("Other somatic drivers in other tissues", "Other somatic drivers in matching tissue")))
head (subset (res.data, AllDriver != "No" & MutSigCV > 0.05 & OncodriveFM > 0.05 & Detected > 2 & AllDriver %in% c ("Other somatic drivers in other tissues", "Other somatic drivers in matching tissue")))
head (subset (res.data, AllDriver != "No" & MutSigCV > 0.05 & OncodriveFM > 0.05 & Detected > 1 & AllDriver %in% c ("Other somatic drivers in other tissues", "Other somatic drivers in matching tissue")))
subset (res.data, AllDriver != "No" & MutSigCV > 0.05 & OncodriveFM > 0.05 & Detected > 1 & AllDriver %in% c ("Other somatic drivers in other tissues", "Other somatic drivers in matching tissue"))
subset (res.data, AllDriver != "No" & MutSigCV > 0.05 & OncodriveFM > 0.05 & Detected > 1 & AllDriver %in% c ("Other germline drivers in other tissues"))
head (subset (res.data, AllDriver != "No" & MutSigCV > 0.05 & OncodriveFM > 0.05 & Detected > 1 & !(AllDriver %in% c ("Missense somatic drivers in matching tissue"))))
nrow (subset (res.data, AllDriver != "No" & MutSigCV > 0.05 & OncodriveFM > 0.05 & Detected > 1 & !(AllDriver %in% c ("Missense somatic drivers in matching tissue"))))
nrow (subset (res.data, AllDriver != "No" & MutSigCV > 0.05 & OncodriveFM > 0.05 & Detected > 0 & !(AllDriver %in% c ("Missense somatic drivers in matching tissue"))))
length(unique(subset (res.data, AllDriver != "No" & MutSigCV > 0.05 & OncodriveFM > 0.05 & Detected > 0 & !(AllDriver %in% c ("Missense somatic drivers in matching tissue")))$Gene))
length(unique(subset (res.data, AllDriver != "No" & MutSigCV > 0.05 & OncodriveFM > 0.05 & Detected > 0 & AllDriver %in% c ("No")))$Gene))
length(unique(subset (res.data, AllDriver != "No" & MutSigCV > 0.05 & OncodriveFM > 0.05 & Detected > 0 & AllDriver %in% c ("No"))$Gene))
head (subset (res.data, AllDriver != "No" & MutSigCV > 0.05 & OncodriveFM > 0.05 & Detected > 0 & AllDriver %in% c ("No")))
head (subset (res.data, AllDriver != "No" & MutSigCV > 0.05 & OncodriveFM > 0.05 & Detected > 0))
head (subset (res.data, AllDriver != "No" & MutSigCV > 0.05 & OncodriveFM > 0.05 & Detected > 0 & KnownDriver == "No"))
head (subset (res.data, AllDriver != "No" & MutSigCV > 0.05 & OncodriveFM > 0.05 & Detected > 0 & KnownDriver == "No" & AllDriver == "No"))
unique (res.data$AllDriver)
head (subset (res.data, MutSigCV > 0.05 & OncodriveFM > 0.05 & Detected > 0 & KnownDriver == "No" & AllDriver == "No"))
head (subset (res.data, MutSigCV > 0.05 & OncodriveFM > 0.05 & Detected > 0 & KnownDriver == "No" & AllDriver == "No" & Detected > 1))
head (subset (res.data, MutSigCV > 0.05 & OncodriveFM > 0.05 & Detected > 0 & KnownDriver == "No" & AllDriver == "No" & Detected > 1)$Gene)
length(unique (subset (res.data, MutSigCV > 0.05 & OncodriveFM > 0.05 & Detected > 0 & KnownDriver == "No" & AllDriver == "No" & Detected > 1)$Gene)))
length(unique (subset (res.data, MutSigCV > 0.05 & OncodriveFM > 0.05 & Detected > 0 & KnownDriver == "No" & AllDriver == "No" & Detected > 1)$Gene))
length(unique (subset (res.data, MutSigCV > 0.05 & OncodriveFM > 0.05 & Detected > 0 & KnownDriver == "No" & AllDriver == "No" & Detected > 2)$Gene))
subset (res.data, MutSigCV > 0.05 & OncodriveFM > 0.05 & Detected > 0 & KnownDriver == "No" & AllDriver == "No" & Detected > 2)
hea d(parg)
head(parg)
parg <- read.table ("thomas/review_proteins_positions/figures/file_nmuts_PARG_luad.txt", sep = "\t", header = TRUE)
wilcox.test (parg$Nmuts ~ parg$PARG)
subset (res.data, MutSigCV > 0.05 & OncodriveFM > 0.05 & Detected > 0 & KnownDriver == "No" & AllDriver == "No" & Detected > 5)
subset (res.data, MutSigCV > 0.05 & OncodriveFM > 0.05 & Detected > 0 & KnownDriver == "No" & AllDriver == "No" & Detected > 4)
subset (res.data, MutSigCV > 0.05 & OncodriveFM > 0.05 & Detected > 0 & KnownDriver == "No" & AllDriver == "No" & Detected > 3)
subset (res.data[,!(c("KnownDriver", "AllDriver", "MutSigCV", "OncodriveFM"))], MutSigCV > 0.05 & OncodriveFM > 0.05 & Detected > 0 & KnownDriver == "No" & AllDriver == "No" & Detected > 3)
subset (res.data[,!c("KnownDriver", "AllDriver", "MutSigCV", "OncodriveFM")], MutSigCV > 0.05 & OncodriveFM > 0.05 & Detected > 0 & KnownDriver == "No" & AllDriver == "No" & Detected > 3)
subset (res.data[,c("KnownDriver", "AllDriver", "MutSigCV", "OncodriveFM")], MutSigCV > 0.05 & OncodriveFM > 0.05 & Detected > 0 & KnownDriver == "No" & AllDriver == "No" & Detected > 3)
subset (res.data[,-which(names(df) %in% c("KnownDriver", "AllDriver", "MutSigCV", "OncodriveFM"))], MutSigCV > 0.05 & OncodriveFM > 0.05 & Detected > 0 & KnownDriver == "No" & AllDriver == "No" & Detected > 3)
sub.study <- subset (res.data, MutSigCV > 0.05 & OncodriveFM > 0.05 & Detected > 0 & KnownDriver == "No" & AllDriver == "No" & Detected > 2)
subset (sub.study[,-which(names(df) %in% c("KnownDriver", "AllDriver", "MutSigCV", "OncodriveFM"))])
sub.study[,-which(names(df) %in% c("KnownDriver", "AllDriver", "MutSigCV", "OncodriveFM"))]
sub.study[,-which(names(sub.study) %in% c("KnownDriver", "AllDriver", "MutSigCV", "OncodriveFM"))]
sub.study[,-which(names(sub.study) %in% c("KnownDriver", "AllDriver", "MutSigCV", "OncodriveFM", "Mode","CLUMPS", "e-Driver3D"))]
sub.study[,-which(names(sub.study) %in% c("KnownDriver", "AllDriver", "MutSigCV", "OncodriveFM", "Mode","CLUMPS", "e.Driver3D"))]
sub.study[,-which(names(sub.study) %in% c("KnownDriver", "AllDriver", "MutSigCV", "OncodriveFM", "Mode","CLUMPS", "e.Driver3D", "GraphPAC"))]
sub.study[,-which(names(sub.study) %in% c("KnownDriver", "AllDriver", "MutSigCV", "OncodriveFM", "Mode","CLUMPS", "e.Driver3D", "GraphPAC", "Detected"))]
25/205
mut.data <- t (mut.data)
score <- mut.data$Score
nmuts <- mut.data$NMuts
gender <- mut.data$Gender
age <- mut.data$Age
subtype <- mut.data$Subtype
Anova (lm (score ~ score ~ as.numeric(as.character(nmuts)) + as.factor(gender) + as.numeric(as.character(age)) + as.factor(subtype) + as.factor (mut.data[,7])))
Anova (lm (score ~ as.numeric(as.character(nmuts)) + as.factor(gender) + as.numeric(as.character(age)) + as.factor(subtype) + as.factor (mut.data[,7])))
head (mut.data[,1:7])
t.mut.data <- t (mut.data[,6:ncol(mut.data)])
Anova (lm (score ~ as.numeric(as.character(nmuts)) + as.factor(gender) + as.numeric(as.character(age)) + as.factor(subtype) + as.factor (t.mut.data[1,])))
test1 <- function (score, nmuts, gender, age, subtype, mut) {#
	res.corr <- Anova (lm (score ~ as.numeric(as.character(nmuts)) + as.factor(gender) + as.numeric(as.character(age)) + as.factor(subtype) + as.factor(mut)))#
	res.sum <- summary (lm (score ~ as.numeric(as.character(nmuts)) + as.factor(gender) + as.numeric(as.character(age)) + as.factor(subtype) + as.factor(mut)))#
	return (res.corr$'Pr(>F)'[5], res.sum$coefficients[nrow(res.corr$coefficients),1])#
}
test1 (score, nmuts, gender, age, subtype, t.mut.data[,1])
test1 (score, nmuts, gender, age, subtype, t.mut.data[1,])
test1.p <- function (score, nmuts, gender, age, subtype, mut) {#
	res.corr <- Anova (lm (score ~ as.numeric(as.character(nmuts)) + as.factor(gender) + as.numeric(as.character(age)) + as.factor(subtype) + as.factor(mut)))#
	return (res.corr$'Pr(>F)'[5])#
}#
#
test1.b <- function (score, nmuts, gender, age, subtype, mut) {#
	res.sum <- summary (lm (score ~ as.numeric(as.character(nmuts)) + as.factor(gender) + as.numeric(as.character(age)) + as.factor(subtype) + as.factor(mut)))#
	return (res.sum$coefficients[nrow(res.corr$coefficients),1])#
}
test1.p (score, nmuts, gender, age, subtype, t.mut.data[1,])
test1.b <- function (score, nmuts, gender, age, subtype, mut) {#
	res.sum <- summary (lm (score ~ as.numeric(as.character(nmuts)) + as.factor(gender) + as.numeric(as.character(age)) + as.factor(subtype) + as.factor(mut)))#
	return (res.sum$coefficients[nrow(res.sum$coefficients),1])#
}
test1.b (score, nmuts, gender, age, subtype, t.mut.data[1,])
summary (lm (score ~ as.numeric(as.character(nmuts)) + as.factor(gender) + as.numeric(as.character(age)) + as.factor(subtype) + as.factor (t.mut.data[1,])))
features <- colnames (mut.data[,7:ncol(mut.data)])#
res.m <- data.frame (Feature = features, p = 1, B = 1)#
#
n.subtypes <- length (unique (mut.data$Subtype))
ptm <- proc.time()#
#
if (n.subtypes > 1) {#
	for (i in 7:ncol(mut.data)) {#
		res.corr <- Anova (lm (mut.data[,2] ~ as.numeric(as.character(mut.data[,3])) + as.factor(mut.data[,4]) + as.numeric(as.character(mut.data[,5])) + mut.data[,6] + as.factor(mut.data[,i]), data = mut.data))#
		res.m[i-6,2] <- res.corr$'Pr(>F)'[5]#
		res.corr <- summary (lm (mut.data[,2] ~ as.numeric(as.character(mut.data[,3])) + as.factor(mut.data[,4]) + as.numeric(as.character(mut.data[,5])) + mut.data[,6] + as.factor(mut.data[,i]), data = mut.data))#
		res.m[i-6,3] <- res.corr$coefficients[nrow(res.corr$coefficients),1]#
	}#
} else {#
	if (args[3] == "OV") {#
		for (i in 7:ncol(mut.data)) {#
			res.corr <- Anova (lm (mut.data[,2] ~ as.numeric(as.character(mut.data[,3])) + as.numeric(as.character(mut.data[,5]))  + as.factor(mut.data[,i]), data = mut.data))#
			res.m[i-6,2] <- res.corr$'Pr(>F)'[3]#
			res.corr <- summary (lm (mut.data[,2] ~ as.numeric(as.character(mut.data[,3])) + as.numeric(as.character(mut.data[,5]))  + as.factor(mut.data[,i]), data = mut.data))#
			res.m[i-6,3] <- res.corr$coefficients[nrow(res.corr$coefficients),1]#
		}#
	} else {#
		for (i in 7:ncol(mut.data)) {#
			res.corr <- Anova (lm (mut.data[,2] ~ as.numeric(as.character(mut.data[,3])) + as.factor(mut.data[,4]) + as.numeric(as.character(mut.data[,5]))  + as.factor(mut.data[,i]), data = mut.data))#
			res.m[i-6,2] <- res.corr$'Pr(>F)'[4]#
			res.corr <- summary (lm (mut.data[,2] ~ as.numeric(as.character(mut.data[,3])) + as.factor(mut.data[,4]) + as.numeric(as.character(mut.data[,5]))  + as.factor(mut.data[,i]), data = mut.data))#
			res.m[i-6,3] <- res.corr$coefficients[nrow(res.corr$coefficients),1]#
		}#
	}#
}#
#
res.m$FDR <- p.adjust (res.m$p, method = "fdr")#
#
proc.time() - ptm
mut.data <- read.table ("TCGA/CIBERSORT/matrixes/PANCAN_Leuk.txt", sep = "\t", header = TRUE, check.names = FALSE)
features <- colnames (mut.data[,7:ncol(mut.data)])#
res.m <- data.frame (Feature = features, p = 1, B = 1)#
#
n.subtypes <- length (unique (mut.data$Subtype))#
#
ptm <- proc.time()#
#
if (n.subtypes > 1) {#
	for (i in 7:ncol(mut.data)) {#
		res.corr <- Anova (lm (mut.data[,2] ~ as.numeric(as.character(mut.data[,3])) + as.factor(mut.data[,4]) + as.numeric(as.character(mut.data[,5])) + mut.data[,6] + as.factor(mut.data[,i]), data = mut.data))#
		res.m[i-6,2] <- res.corr$'Pr(>F)'[5]#
		res.corr <- summary (lm (mut.data[,2] ~ as.numeric(as.character(mut.data[,3])) + as.factor(mut.data[,4]) + as.numeric(as.character(mut.data[,5])) + mut.data[,6] + as.factor(mut.data[,i]), data = mut.data))#
		res.m[i-6,3] <- res.corr$coefficients[nrow(res.corr$coefficients),1]#
	}#
} else {#
	if (args[3] == "OV") {#
		for (i in 7:ncol(mut.data)) {#
			res.corr <- Anova (lm (mut.data[,2] ~ as.numeric(as.character(mut.data[,3])) + as.numeric(as.character(mut.data[,5]))  + as.factor(mut.data[,i]), data = mut.data))#
			res.m[i-6,2] <- res.corr$'Pr(>F)'[3]#
			res.corr <- summary (lm (mut.data[,2] ~ as.numeric(as.character(mut.data[,3])) + as.numeric(as.character(mut.data[,5]))  + as.factor(mut.data[,i]), data = mut.data))#
			res.m[i-6,3] <- res.corr$coefficients[nrow(res.corr$coefficients),1]#
		}#
	} else {#
		for (i in 7:ncol(mut.data)) {#
			res.corr <- Anova (lm (mut.data[,2] ~ as.numeric(as.character(mut.data[,3])) + as.factor(mut.data[,4]) + as.numeric(as.character(mut.data[,5]))  + as.factor(mut.data[,i]), data = mut.data))#
			res.m[i-6,2] <- res.corr$'Pr(>F)'[4]#
			res.corr <- summary (lm (mut.data[,2] ~ as.numeric(as.character(mut.data[,3])) + as.factor(mut.data[,4]) + as.numeric(as.character(mut.data[,5]))  + as.factor(mut.data[,i]), data = mut.data))#
			res.m[i-6,3] <- res.corr$coefficients[nrow(res.corr$coefficients),1]#
		}#
	}#
}#
#
res.m$FDR <- p.adjust (res.m$p, method = "fdr")#
#
proc.time() - ptm
test.all.p <- function (score, nmuts, gender, age, subtype, mut) {#
	res.corr <- Anova (lm (score ~ as.numeric(as.character(nmuts)) + as.factor(gender) + as.numeric(as.character(age)) + as.factor(subtype) + as.factor(mut)))#
	return (res.corr$'Pr(>F)'[5])#
}#
#
test.all.b <- function (score, nmuts, gender, age, subtype, mut) {#
	res.sum <- summary (lm (score ~ as.numeric(as.character(nmuts)) + as.factor(gender) + as.numeric(as.character(age)) + as.factor(subtype) + as.factor(mut)))#
	return (res.sum$coefficients[nrow(res.sum$coefficients),1])#
}
mut.data <- as.matrix (mut.data)#
t.mut.data <- t (mut.data[,6:ncol(mut.data)])#
#
features <- colnames (mut.data[,7:ncol(mut.data)])#
res.m <- data.frame (Feature = features, p = 1, B = 1)#
#
n.subtypes <- length (unique (mut.data$Subtype))#
#
score <- mut.data$Score#
nmuts <- mut.data$NMuts#
gender <- mut.data$Gender#
age <- mut.data$Age#
subtype <- mut.data$Subtype#
#
test.all.p <- function (score, nmuts, gender, age, subtype, mut) {#
	res.corr <- Anova (lm (score ~ as.numeric(as.character(nmuts)) + as.factor(gender) + as.numeric(as.character(age)) + as.factor(subtype) + as.factor(mut)))#
	return (res.corr$'Pr(>F)'[5])#
}#
#
test.all.b <- function (score, nmuts, gender, age, subtype, mut) {#
	res.sum <- summary (lm (score ~ as.numeric(as.character(nmuts)) + as.factor(gender) + as.numeric(as.character(age)) + as.factor(subtype) + as.factor(mut)))#
	return (res.sum$coefficients[nrow(res.sum$coefficients),1])#
}
head (mut.data[,1:5])
sum (t.mut.data[1,])
sum (t.mut.data[2,])
sum (t.mut.data[3,])
test.all.p <- function (mut, score, nmuts, gender, age, subtype) {#
	res.corr <- Anova (lm (score ~ as.numeric(as.character(nmuts)) + as.factor(gender) + as.numeric(as.character(age)) + as.factor(subtype) + as.factor(mut)))#
	return (res.corr$'Pr(>F)'[5])#
}
t.mut.data$p <- apply (t.mut.data, 1, test.all.p, score, nmuts, gender, age, subtype)
test.all.p <- function (mut, score, nmuts, gender, age, subtype) {#
	res.corr <- Anova (lm (score ~ as.numeric(as.character(nmuts)) + as.factor(gender) + as.numeric(as.character(age)) + as.factor(subtype) + as.factor(mut)))#
	return (res.corr$'Pr(>F)'[5])#
}#
#
test.all.b <- function (mut, score, nmuts, gender, age, subtype) {#
	res.sum <- summary (lm (score ~ as.numeric(as.character(nmuts)) + as.factor(gender) + as.numeric(as.character(age)) + as.factor(subtype) + as.factor(mut)))#
	return (res.sum$coefficients[nrow(res.sum$coefficients),1])#
}
t.mut.data <- t (mut.data[,6:ncol(mut.data)])#
t.mut.data <- as.matrix (t.mut.data)#
#
features <- colnames (mut.data[,7:ncol(mut.data)])#
res.m <- data.frame (Feature = features, p = 1, B = 1)#
#
n.subtypes <- length (unique (mut.data$Subtype))#
#
score <- mut.data$Score#
nmuts <- mut.data$NMuts#
gender <- mut.data$Gender#
age <- mut.data$Age#
subtype <- mut.data$Subtype
ptm <- proc.time()#
	t.mut.data$p <- apply (t.mut.data, 1, test.all.p, score, nmuts, gender, age, subtype)#
	t.mut.data$b <- apply (t.mut.data, 1, test.all.b, score, nmuts, gender, age, subtype)#
	t.mut.data$FDR <- p.adjust (t.mut.data$p, method = "fdr")#
	proc.time() - ptm
help (parApply)
mut.data <- read.table ("TCGA/CIBERSORT/matrixes/PANCAN_Leuk.txt", sep = "\t", header = TRUE, row.names = 1, sep = "\t", check.names = FALSE)
no_cores <- detectCores() - 1#
cl <- makeCluster(no_cores, type = "FORK")
ptm <- proc.time()#
	t.mut.data$p <- parApply (t.mut.data, 1, test.all.p, score, nmuts, gender, age, subtype)#
	t.mut.data$b <- parApply (t.mut.data, 1, test.all.b, score, nmuts, gender, age, subtype)#
	t.mut.data$FDR <- p.adjust (t.mut.data$p, method = "fdr")#
	proc.time() - ptm
ptm <- proc.time()#
	no_cores <- detectCores() - 1#
	cl <- makeCluster(no_cores, type = "FORK")#
	t.mut.data$p <- parApply (t.mut.data, 1, test.all.p, score, nmuts, gender, age, subtype)#
	t.mut.data$b <- parApply (t.mut.data, 1, test.all.b, score, nmuts, gender, age, subtype)#
	t.mut.data$FDR <- p.adjust (t.mut.data$p, method = "fdr")#
	proc.time() - ptm
ptm <- proc.time()#
	no_cores <- detectCores() - 1#
	cl <- makeCluster(no_cores, type = "FORK")#
	t.mut.data$p <- parApply (cl, t.mut.data, 1, test.all.p, score, nmuts, gender, age, subtype)#
	t.mut.data$b <- parApply (cl, t.mut.data, 1, test.all.b, score, nmuts, gender, age, subtype)#
	t.mut.data$FDR <- p.adjust (t.mut.data$p, method = "fdr")#
	proc.time() - ptm
ptm <- proc.time()#
	no_cores <- detectCores() - 1#
	cl <- makeCluster(no_cores, type = "FORK")#
	t.mut.data$p <- parApply (cl, t.mut.data, 1, test.all.p, score, nmuts, gender, age, subtype)#
	stopCluster (cl)#
	no_cores <- detectCores() - 1#
	cl <- makeCluster(no_cores, type = "FORK")#
	t.mut.data$b <- parApply (cl, t.mut.data, 1, test.all.b, score, nmuts, gender, age, subtype)#
	stopCluster (cl)#
	t.mut.data$FDR <- p.adjust (t.mut.data$p, method = "fdr")#
	proc.time() - ptm
head (t.mut.data$b)
mut.data <- read.table ("TCGA/CIBERSORT/matrixes/PANCAN_Leuk.txt", sep = "\t", header = TRUE, row.names = 1, check.names = FALSE)
ptm <- proc.time()#
	no_cores <- detectCores() - 1#
	cl <- makeCluster(no_cores, type = "FORK")#
	t.mut.data$p <- parApply (cl, t.mut.data, 1, test.all.p, score, nmuts, gender, age, subtype)#
	stopCluster (cl)#
	no_cores <- detectCores() - 1#
	cl <- makeCluster(no_cores, type = "FORK")#
	t.mut.data$b <- parApply (cl, t.mut.data[,-ncol(t.mut.data)], 1, test.all.b, score, nmuts, gender, age, subtype)#
	stopCluster (cl)#
	t.mut.data$FDR <- p.adjust (t.mut.data$p, method = "fdr")#
	proc.time() - ptm
head (t.mut.data[,-ncol(t.mut.data)])
-ncol(t.mut.data)
ncol(t.mut.data)
dim (t.mut.data)
t.mut.data
test.all <- function (mut, score, nmuts, gender, age, subtype) {#
	mut.model <- lm (score ~ as.numeric(as.character(nmuts)) + as.factor(gender) + as.numeric(as.character(age)) + as.factor(subtype) + as.factor(mut))#
	p.anova <- Anova (mut.model)#
	b.summary <- summary (mut.model)#
	return (list (p.anova$'Pr(>F)'[5], model$coefficients[nrow(model$coefficients),1])#
}
test.all <- function (mut, score, nmuts, gender, age, subtype) {#
	mut.model <- lm (score ~ as.numeric(as.character(nmuts)) + as.factor(gender) + as.numeric(as.character(age)) + as.factor(subtype) + as.factor(mut))#
	p.anova <- Anova (mut.model)#
	b.summary <- summary (mut.model)#
	return (list (p.anova$'Pr(>F)'[5], model$coefficients[nrow(model$coefficients),1]))#
}
t.mut.data <- t (mut.data[,6:ncol(mut.data)])#
t.mut.data <- as.matrix (t.mut.data)#
#
features <- colnames (mut.data[,7:ncol(mut.data)])#
res.m <- data.frame (Feature = features, p = 1, B = 1)#
#
n.subtypes <- length (unique (mut.data$Subtype))#
#
score <- mut.data$Score#
nmuts <- mut.data$NMuts#
gender <- mut.data$Gender#
age <- mut.data$Age#
subtype <- mut.data$Subtype#
#
test.all.p <- function (mut, score, nmuts, gender, age, subtype) {#
	res.corr <- Anova (lm (score ~ as.numeric(as.character(nmuts)) + as.factor(gender) + as.numeric(as.character(age)) + as.factor(subtype) + as.factor(mut)))#
	return (res.corr$'Pr(>F)'[5])#
}#
#
test.all.b <- function (mut, score, nmuts, gender, age, subtype) {#
	res.sum <- summary (lm (score ~ as.numeric(as.character(nmuts)) + as.factor(gender) + as.numeric(as.character(age)) + as.factor(subtype) + as.factor(mut)))#
	return (res.sum$coefficients[nrow(res.sum$coefficients),1])#
}
head (t.mut.data],1:5)
apply (t.mut.data[1:5,], test.all.p, score, nmuts, gender, age, subtype)
apply (t.mut.data[1:5,], test.all.p, 1, score, nmuts, gender, age, subtype)
apply (t.mut.data[1:5,], 1, test.all.p, score, nmuts, gender, age, subtype)
score
test.all <- function (mut, score, nmuts, gender, age, subtype) {#
	mut.model <- lm (score ~ as.numeric(as.character(nmuts)) + as.factor(gender) + as.numeric(as.character(age)) + as.factor(subtype) + as.factor(mut))#
	p.anova <- Anova (mut.model)#
	b.summary <- summary (mut.model)#
	return (list (p.anova$'Pr(>F)'[5], b.summary$coefficients[nrow(b.summary$coefficients),1]))#
}
apply (t.mut.data[1:5,], 1, test.all, score, nmuts, gender, age, subtype)
t.mut.bk <- t.mut.data
(t.mut.data$p, t.mut.data$b) <- apply (t.mut.data[1:5,], 1, test.all, score, nmuts, gender, age, subtype)
test.all <- function (mut, score, nmuts, gender, age, subtype) {#
	mut.model <- lm (score ~ as.numeric(as.character(nmuts)) + as.factor(gender) + as.numeric(as.character(age)) + as.factor(subtype) + as.factor(mut))#
	p.anova <- Anova (mut.model)#
	b.summary <- summary (mut.model)#
	return (list (p = p.anova$'Pr(>F)'[5], b = b.summary$coefficients[nrow(b.summary$coefficients),1]))#
}
results <- apply (t.mut.data, 1, test.all, score, nmuts, gender, age, subtype)
t.mut.data$p <- unlist (results)[attr(unlist(results), "names") == "p"]
t.mut.data <- t.mut.bk
head (unlist (results)[attr(unlist(results), "names") == "p"])
head (results)
head (attr(unlist(results), "names"))
head (results$ENSP00000350719)
head (results$ENSP00000350719$p)
ptm <- proc.time()#
#
mut.data <- read.table ("TCGA/CIBERSORT/PANCAN_Leuk.txt", sep = "\t", header = TRUE, check.names = FALSE, row.names = 1)#
t.mut.data <- t (mut.data[,6:ncol(mut.data)])#
t.mut.data <- as.matrix (t.mut.data)#
#
features <- colnames (mut.data[,7:ncol(mut.data)])#
res.m <- data.frame (Feature = features, p = 1, B = 1)#
#
n.subtypes <- length (unique (mut.data$Subtype))#
#
score <- mut.data$Score#
nmuts <- mut.data$NMuts#
gender <- mut.data$Gender#
age <- mut.data$Age#
subtype <- mut.data$Subtype#
#
test.all <- function (mut, score, nmuts, gender, age, subtype) {#
	mut.model <- lm (score ~ as.numeric(as.character(nmuts)) + as.factor(gender) + as.numeric(as.character(age)) + as.factor(subtype) + as.factor(mut))#
	p.anova <- Anova (mut.model)#
	return (p.anova$'Pr(>F)'[5])#
}#
#
test.no.subtype <- function (mut, score, nmuts, gender, age) {#
	mut.model <- lm (score ~ as.numeric(as.character(nmuts)) + as.factor(gender) + as.numeric(as.character(age)) + as.factor(mut))#
	p.anova <- Anova (mut.model)#
	return (p.anova$'Pr(>F)'[5])#
}#
#
test.ov <- function (mut, score, nmuts, age) {#
	mut.model <- lm (score ~ as.numeric(as.character(nmuts)) + as.numeric(as.character(age)) + as.factor(mut))#
	p.anova <- Anova (mut.model)#
	return (p.anova$'Pr(>F)'[5])#
}#
#
if (n.subtypes > 1) {#
	no_cores <- detectCores() - 1#
	cl <- makeCluster(no_cores, type = "FORK")#
	t.mut.data$p <- parApply (cl, t.mut.data, 1, test.all.p, score, nmuts, gender, age, subtype)#
	stopCluster (cl)#
	t.mut.data$FDR <- p.adjust (t.mut.data$p, method = "fdr")#
} else {#
	if (args[3] == "OV") {#
		no_cores <- detectCores() - 1#
		cl <- makeCluster(no_cores, type = "FORK")#
		t.mut.data$p <- parApply (cl, t.mut.data, 1, test.ov, score, nmuts, age)#
		stopCluster (cl)#
		t.mut.data$FDR <- p.adjust (t.mut.data$p, method = "fdr")#
	} else {#
		no_cores <- detectCores() - 1#
		cl <- makeCluster(no_cores, type = "FORK")#
		t.mut.data$p <- parApply (cl, t.mut.data, 1, test.no.subtype, score, nmuts, age)#
		stopCluster (cl)#
		t.mut.data$FDR <- p.adjust (t.mut.data$p, method = "fdr")#
	}#
}#
#
proc.time() - ptm
ptm <- proc.time()#
#
mut.data <- read.table ("TCGA/CIBERSORT/PANCAN_Leuk.txt", sep = "\t", header = TRUE, check.names = FALSE, row.names = 1)#
t.mut.data <- t (mut.data[,6:ncol(mut.data)])#
t.mut.data <- as.matrix (t.mut.data)#
#
features <- colnames (mut.data[,7:ncol(mut.data)])#
res.m <- data.frame (Feature = features, p = 1, B = 1)#
#
n.subtypes <- length (unique (mut.data$Subtype))#
#
score <- mut.data$Score#
nmuts <- mut.data$NMuts#
gender <- mut.data$Gender#
age <- mut.data$Age#
subtype <- mut.data$Subtype#
#
test.all <- function (mut, score, nmuts, gender, age, subtype) {#
	mut.model <- lm (score ~ as.numeric(as.character(nmuts)) + as.factor(gender) + as.numeric(as.character(age)) + as.factor(subtype) + as.factor(mut))#
	p.anova <- Anova (mut.model)#
	return (p.anova$'Pr(>F)'[5])#
}#
#
test.no.subtype <- function (mut, score, nmuts, gender, age) {#
	mut.model <- lm (score ~ as.numeric(as.character(nmuts)) + as.factor(gender) + as.numeric(as.character(age)) + as.factor(mut))#
	p.anova <- Anova (mut.model)#
	return (p.anova$'Pr(>F)'[5])#
}#
#
test.ov <- function (mut, score, nmuts, age) {#
	mut.model <- lm (score ~ as.numeric(as.character(nmuts)) + as.numeric(as.character(age)) + as.factor(mut))#
	p.anova <- Anova (mut.model)#
	return (p.anova$'Pr(>F)'[5])#
}#
#
if (n.subtypes > 1) {#
	#no_cores <- detectCores() - 1#
	#cl <- makeCluster(no_cores, type = "FORK")#
	#t.mut.data$p <- parApply (cl, t.mut.data, 1, test.all.p, score, nmuts, gender, age, subtype)#
	t.mut.data$p <- apply (t.mut.data, 1, test.all.p, score, nmuts, gender, age, subtype)#
	#stopCluster (cl)#
	t.mut.data$FDR <- p.adjust (t.mut.data$p, method = "fdr")#
} else {#
	if (args[3] == "OV") {#
		no_cores <- detectCores() - 1#
		cl <- makeCluster(no_cores, type = "FORK")#
		t.mut.data$p <- parApply (cl, t.mut.data, 1, test.ov, score, nmuts, age)#
		stopCluster (cl)#
		t.mut.data$FDR <- p.adjust (t.mut.data$p, method = "fdr")#
	} else {#
		no_cores <- detectCores() - 1#
		cl <- makeCluster(no_cores, type = "FORK")#
		t.mut.data$p <- parApply (cl, t.mut.data, 1, test.no.subtype, score, nmuts, age)#
		stopCluster (cl)#
		t.mut.data$FDR <- p.adjust (t.mut.data$p, method = "fdr")#
	}#
}#
#
proc.time() - ptm
mut.data <- read.table ("TCGA/CIBERSORT/PANCAN_Leuk.txt", sep = "\t", header = TRUE, check.names = FALSE, row.names = 1)#
t.mut.data <- t (mut.data[,6:ncol(mut.data)])#
t.mut.data <- as.matrix (t.mut.data)#
#
features <- colnames (mut.data[,7:ncol(mut.data)])#
res.m <- data.frame (Feature = features, p = 1, B = 1)#
#
n.subtypes <- length (unique (mut.data$Subtype))#
#
score <- mut.data$Score#
nmuts <- mut.data$NMuts#
gender <- mut.data$Gender#
age <- mut.data$Age#
subtype <- mut.data$Subtype
mut.data <- read.table ("/TCGA/CIBERSORT/PANCAN_Leuk.txt", sep = "\t", header = TRUE, check.names = FALSE, row.names = 1)#
t.mut.data <- t (mut.data[,6:ncol(mut.data)])#
t.mut.data <- as.matrix (t.mut.data)#
#
features <- colnames (mut.data[,7:ncol(mut.data)])#
res.m <- data.frame (Feature = features, p = 1, B = 1)#
#
n.subtypes <- length (unique (mut.data$Subtype))#
#
score <- mut.data$Score#
nmuts <- mut.data$NMuts#
gender <- mut.data$Gender#
age <- mut.data$Age#
subtype <- mut.data$Subtype
mut.data <- read.table ("TCGA/CIBERSORT/matrixes/PANCAN_Leuk.txt", sep = "\t", header = TRUE, check.names = FALSE, row.names = 1)
ptm <- proc.time()#
#
mut.data <- read.table ("TCGA/CIBERSORT/matrixes/PANCAN_Leuk.txt", sep = "\t", header = TRUE, check.names = FALSE, row.names = 1)#
t.mut.data <- t (mut.data[,6:ncol(mut.data)])#
t.mut.data <- as.matrix (t.mut.data)#
#
features <- colnames (mut.data[,7:ncol(mut.data)])#
res.m <- data.frame (Feature = features, p = 1, B = 1)#
#
n.subtypes <- length (unique (mut.data$Subtype))#
#
score <- mut.data$Score#
nmuts <- mut.data$NMuts#
gender <- mut.data$Gender#
age <- mut.data$Age#
subtype <- mut.data$Subtype#
#
test.all <- function (mut, score, nmuts, gender, age, subtype) {#
	mut.model <- lm (score ~ as.numeric(as.character(nmuts)) + as.factor(gender) + as.numeric(as.character(age)) + as.factor(subtype) + as.factor(mut))#
	p.anova <- Anova (mut.model)#
	return (p.anova$'Pr(>F)'[5])#
}#
#
test.no.subtype <- function (mut, score, nmuts, gender, age) {#
	mut.model <- lm (score ~ as.numeric(as.character(nmuts)) + as.factor(gender) + as.numeric(as.character(age)) + as.factor(mut))#
	p.anova <- Anova (mut.model)#
	return (p.anova$'Pr(>F)'[5])#
}#
#
test.ov <- function (mut, score, nmuts, age) {#
	mut.model <- lm (score ~ as.numeric(as.character(nmuts)) + as.numeric(as.character(age)) + as.factor(mut))#
	p.anova <- Anova (mut.model)#
	return (p.anova$'Pr(>F)'[5])#
}#
#
if (n.subtypes > 1) {#
	no_cores <- detectCores() - 1#
	cl <- makeCluster(no_cores, type = "FORK")#
	t.mut.data$p <- parApply (cl, t.mut.data, 1, test.all.p, score, nmuts, gender, age, subtype)#
	stopCluster (cl)#
	t.mut.data$FDR <- p.adjust (t.mut.data$p, method = "fdr")#
} else {#
	if (args[3] == "OV") {#
		no_cores <- detectCores() - 1#
		cl <- makeCluster(no_cores, type = "FORK")#
		t.mut.data$p <- parApply (cl, t.mut.data, 1, test.ov, score, nmuts, age)#
		stopCluster (cl)#
		t.mut.data$FDR <- p.adjust (t.mut.data$p, method = "fdr")#
	} else {#
		no_cores <- detectCores() - 1#
		cl <- makeCluster(no_cores, type = "FORK")#
		t.mut.data$p <- parApply (cl, t.mut.data, 1, test.no.subtype, score, nmuts, age)#
		stopCluster (cl)#
		t.mut.data$FDR <- p.adjust (t.mut.data$p, method = "fdr")#
	}#
}#
#
proc.time() - ptm
mut.data <- read.table ("TCGA/CIBERSORT/matrixes/PANCAN_Leuk.txt", sep = "\t", header = TRUE, check.names = FALSE, row.names = 1)#
t.mut.data <- t (mut.data[,6:ncol(mut.data)])#
t.mut.data <- as.matrix (t.mut.data)#
#
features <- colnames (mut.data[,7:ncol(mut.data)])#
res.m <- data.frame (Feature = features, p = 1, B = 1)#
#
n.subtypes <- length (unique (mut.data$Subtype))#
#
score <- mut.data$Score#
nmuts <- mut.data$NMuts#
gender <- mut.data$Gender#
age <- mut.data$Age#
subtype <- mut.data$Subtype
t.bk <- t.mut.data
no_cores <- detectCores() - 1#
	cl <- makeCluster(no_cores, type = "FORK")#
	t.mut.data$p <- parApply (cl, t.mut.data, 1, test.all.p, score, nmuts, gender, age, subtype)#
	stopCluster (cl)
class (mut.data)
t.mut.data <- t.bk
class (t.mut.data)
no_cores <- detectCores() - 1#
	cl <- makeCluster(no_cores, type = "FORK")#
	t.mut.data <- cbind(t.mut.data, p = parApply (cl, t.mut.data, 1, test.all.p, score, nmuts, gender, age, subtype))#
	stopCluster (cl)
head (t.mut.data[,1:5])
head (t.mut.data$p)
t.mut.data <- cbind(t.mut.data, FDR = p.adjust (t.mut.data$p, method = "fdr"))
t.mut.data <- cbind(t.mut.data, FDR = p.adjust (t.mut.data[,"p"], method = "fdr"))
head (t.mut.data[,ncol(t.mut.data)])
ptm <- proc.time()#
#
mut.data <- read.table ("TCGA/CIBERSORT/matrixes/PANCAN_Leuk.txt", sep = "\t", header = TRUE, check.names = FALSE, row.names = 1)#
t.mut.data <- t (mut.data[,6:ncol(mut.data)])#
t.mut.data <- as.matrix (t.mut.data)#
#
features <- colnames (mut.data[,7:ncol(mut.data)])#
res.m <- data.frame (Feature = features, p = 1, B = 1)#
#
n.subtypes <- length (unique (mut.data$Subtype))#
#
score <- mut.data$Score#
nmuts <- mut.data$NMuts#
gender <- mut.data$Gender#
age <- mut.data$Age#
subtype <- mut.data$Subtype#
#
test.all <- function (mut, score, nmuts, gender, age, subtype) {#
	mut.model <- lm (score ~ as.numeric(as.character(nmuts)) + as.factor(gender) + as.numeric(as.character(age)) + as.factor(subtype) + as.factor(mut))#
	p.anova <- Anova (mut.model)#
	return (p.anova$'Pr(>F)'[5])#
}#
#
test.no.subtype <- function (mut, score, nmuts, gender, age) {#
	mut.model <- lm (score ~ as.numeric(as.character(nmuts)) + as.factor(gender) + as.numeric(as.character(age)) + as.factor(mut))#
	p.anova <- Anova (mut.model)#
	return (p.anova$'Pr(>F)'[5])#
}#
#
test.ov <- function (mut, score, nmuts, age) {#
	mut.model <- lm (score ~ as.numeric(as.character(nmuts)) + as.numeric(as.character(age)) + as.factor(mut))#
	p.anova <- Anova (mut.model)#
	return (p.anova$'Pr(>F)'[5])#
}#
#
if (n.subtypes > 1) {#
	no_cores <- detectCores() - 1#
	cl <- makeCluster(no_cores, type = "FORK")#
	t.mut.data <- cbind(t.mut.data, p = parApply (cl, t.mut.data, 1, test.all.p, score, nmuts, gender, age, subtype))#
	stopCluster (cl)#
	t.mut.data <- cbind(t.mut.data, FDR = p.adjust (t.mut.data[,"p"], method = "fdr"))#
} else {#
	if (args[3] == "OV") {#
		no_cores <- detectCores() - 1#
		cl <- makeCluster(no_cores, type = "FORK")#
		t.mut.data <- cbind(t.mut.data, p = parApply (cl, t.mut.data, 1, test.ov, score, nmuts, age))#
		stopCluster (cl)#
		t.mut.data <- cbind(t.mut.data, FDR = p.adjust (t.mut.data[,"p"], method = "fdr"))#
	} else {#
		no_cores <- detectCores() - 1#
		cl <- makeCluster(no_cores, type = "FORK")#
		t.mut.data <- cbind(t.mut.data, p = parApply (cl, t.mut.data, 1, test.no.subtype, score, nmuts, age))#
		stopCluster (cl)#
		t.mut.data <- cbind(t.mut.data, FDR = p.adjust (t.mut.data[,"p"], method = "fdr"))#
	}#
}#
#
proc.time() - ptm
head (t.mut.data[,"p", "FDR"])
head (t.mut.data[,c("p", "FDR")])
115/2300
115/2500
library (ggplot2)
res.driver <- read.table ("thomas/review_proteins_positions/final_figures/raw_files/matrix_pancan.txt", sep = "\t", header = TRUE)
head (res.driver)
sub.sig <- subset (res.driver, Detected > 2 & OncodriveFM > 0.05 & MutSigCV > 0.05)
sub.sig <- subset (res.driver, Detected > 2 & OncodriveFM > 0.05 & MutSigCV > 0.05 & AllDriver == "No")
head (sub.sig[,!c("NPat", "KnownDriver", "Mode", "AllDriver")])
head (subset (-which (names (sub.sig) %in% c ("NPat", "KnownDriver"))))
head (sub.sig [-which (names (sub.sig) %in% c ("NPat", "KnownDriver"))])
head (sub.sig [-which (names (sub.sig) %in% c ("NPat", "KnownDriver"), "Mode", "AllDriver", "OncodriveFM", "MutSigCV")])
head (sub.sig [-which (names (sub.sig) %in% c ("NPat", "KnownDriver", "Mode", "AllDriver", "OncodriveFM", "MutSigCV")])
sub.sig [-which (names (sub.sig) %in% c ("NPat", "KnownDriver", "Mode", "AllDriver", "OncodriveFM", "MutSigCV"))]
sub.sig [-which (names (sub.sig) %in% c ("NPat", "KnownDriver", "Mode", "AllDriver", "OncodriveFM", "MutSigCV", "Detected"))]
library (parallele)
mut.data <- read.table ("TCGA/CIBERSORT/matrixes/KICH_T_cells_CD4_memory_resting.txt", sep = "\t", header = TRUE, check.names = FALSE, row.names = 1)
t.mut.data <- t (mut.data[,6:ncol(mut.data)])#
t.mut.data <- as.matrix (t.mut.data)#
#
features <- colnames (mut.data[,7:ncol(mut.data)])#
res.m <- data.frame (Feature = features, p = 1, B = 1)#
#
n.subtypes <- length (unique (mut.data$Subtype))#
#
score <- mut.data$Score#
nmuts <- mut.data$NMuts#
gender <- mut.data$Gender#
age <- mut.data$Age#
subtype <- mut.data$Subtype#
#
test.all <- function (mut, score, nmuts, gender, age, subtype) {#
	mut.model <- lm (score ~ as.numeric(as.character(nmuts)) + as.factor(gender) + as.numeric(as.character(age)) + as.factor(subtype) + as.factor(mut))#
	p.anova <- Anova (mut.model)#
	return (p.anova$'Pr(>F)'[5])#
}#
#
test.no.subtype <- function (mut, score, nmuts, gender, age) {#
	mut.model <- lm (score ~ as.numeric(as.character(nmuts)) + as.factor(gender) + as.numeric(as.character(age)) + as.factor(mut))#
	p.anova <- Anova (mut.model)#
	return (p.anova$'Pr(>F)'[5])#
}#
#
test.ov <- function (mut, score, nmuts, age) {#
	mut.model <- lm (score ~ as.numeric(as.character(nmuts)) + as.numeric(as.character(age)) + as.factor(mut))#
	p.anova <- Anova (mut.model)#
	return (p.anova$'Pr(>F)'[5])#
}
n.subtypes
no_cores <- detectCores() - 1#
		cl <- makeCluster(no_cores, type = "FORK")#
		t.mut.data <- cbind(t.mut.data, p = parApply (cl, t.mut.data, 1, test.no.subtype, score, nmuts, age))#
		stopCluster (cl)#
		t.mut.data <- cbind(t.mut.data, FDR = p.adjust (t.mut.data[,"p"], method = "fdr"))
head (age)
no_cores <- detectCores() - 1#
		cl <- makeCluster(no_cores, type = "FORK")#
		t.mut.data <- cbind(t.mut.data, p = parApply (cl, t.mut.data, 1, test.no.subtype, score, nmuts, gender, age))#
		stopCluster (cl)#
		t.mut.data <- cbind(t.mut.data, FDR = p.adjust (t.mut.data[,"p"], method = "fdr"))
mut.data <- read.table ("TCGA/CIBERSORT/matrixes/TGCT_Neutrophils.txt", sep = "\t", header = TRUE, check.names = FALSE, row.names = 1)
unique (mut.data$Gender)
mut.data <- read.table ("TCGA/CIBERSORT/matrixes/DLBC_NK_cells_resting.txt", sep = "\t", header = TRUE, check.names = FALSE, row.names = 1)
unique (mut.data$Score)
mut.data <- read.table ("TCGA/CIBERSORT/matrixes/SKCM_B_cells_memory.txt", sep = "\t", header = TRUE, check.names = FALSE, row.names = 1)
head (mut.data[,1:10])
library (car)
library (parallel)
args <- c ("NA", "NA", "SKCM")
t.mut.data <- t (mut.data[,6:ncol(mut.data)])#
t.mut.data <- as.matrix (t.mut.data)#
#
features <- colnames (mut.data[,7:ncol(mut.data)])#
res.m <- data.frame (Feature = features, p = 1, B = 1)#
#
n.subtypes <- length (unique (mut.data$Subtype))#
#
score <- mut.data$Score#
nmuts <- mut.data$NMuts#
gender <- mut.data$Gender#
age <- mut.data$Age#
subtype <- mut.data$Subtype#
#
test.all <- function (mut, score, nmuts, gender, age, subtype) {#
	mut.model <- lm (score ~ as.numeric(as.character(nmuts)) + as.factor(gender) + as.numeric(as.character(age)) + as.factor(subtype) + as.factor(mut))#
	p.anova <- Anova (mut.model)#
	return (p.anova$'Pr(>F)'[5])#
}#
#
test.no.subtype <- function (mut, score, nmuts, gender, age) {#
	mut.model <- lm (score ~ as.numeric(as.character(nmuts)) + as.factor(gender) + as.numeric(as.character(age)) + as.factor(mut))#
	p.anova <- Anova (mut.model)#
	return (p.anova$'Pr(>F)'[5])#
}#
#
test.ov <- function (mut, score, nmuts, age) {#
	mut.model <- lm (score ~ as.numeric(as.character(nmuts)) + as.numeric(as.character(age)) + as.factor(mut))#
	p.anova <- Anova (mut.model)#
	return (p.anova$'Pr(>F)'[5])#
}#
#
if (n.subtypes > 1) {#
	no_cores <- detectCores() - 1#
	cl <- makeCluster(no_cores, type = "FORK")#
	t.mut.data <- cbind(t.mut.data, p = parApply (cl, t.mut.data, 1, test.all, score, nmuts, gender, age, subtype))#
	stopCluster (cl)#
	t.mut.data <- cbind(t.mut.data, FDR = p.adjust (t.mut.data[,"p"], method = "fdr"))#
} else {#
	if (args[3] == "OV" | args[3] == "TGCT" | args[3] == "UCS" | args[3] == "PRAD") {#
		no_cores <- detectCores() - 1#
		cl <- makeCluster(no_cores, type = "FORK")#
		t.mut.data <- cbind(t.mut.data, p = parApply (cl, t.mut.data, 1, test.ov, score, nmuts, age))#
		stopCluster (cl)#
		t.mut.data <- cbind(t.mut.data, FDR = p.adjust (t.mut.data[,"p"], method = "fdr"))#
	} else {#
		no_cores <- detectCores() - 1#
		cl <- makeCluster(no_cores, type = "FORK")#
		t.mut.data <- cbind(t.mut.data, p = parApply (cl, t.mut.data, 1, test.no.subtype, score, nmuts, gender, age))#
		stopCluster (cl)#
		t.mut.data <- cbind(t.mut.data, FDR = p.adjust (t.mut.data[,"p"], method = "fdr"))#
	}#
}
lm (score ~ as.numeric(as.character(nmuts)) + as.factor(gender) + as.numeric(as.character(age)) + as.factor(mut)
mut <- t.mut.data[,15]
)
length (mut)
length (gender)
t.mut.data <- t (mut.data[,6:ncol(mut.data)])#
t.mut.data <- as.matrix (t.mut.data)
mut <- t.mut.data[15,]
lm (score ~ as.numeric(as.character(nmuts)) + as.factor(gender) + as.numeric(as.character(age)) + as.factor(mut))
mut.model <- lm (score ~ as.numeric(as.character(nmuts)) + as.factor(gender) + as.numeric(as.character(age)) + as.factor(mut))#
	p.anova <- Anova (mut.model)
p.anova
t.mut.data <- t (mut.data[,6:ncol(mut.data)])#
t.mut.data <- as.matrix (t.mut.data)#
#
features <- colnames (mut.data[,7:ncol(mut.data)])#
res.m <- data.frame (Feature = features, p = 1, B = 1)#
#
n.subtypes <- length (unique (mut.data$Subtype))#
#
score <- mut.data$Score#
nmuts <- mut.data$NMuts#
gender <- mut.data$Gender#
age <- mut.data$Age#
subtype <- mut.data$Subtype#
#
test.all <- function (mut, score, nmuts, gender, age, subtype) {#
	mut.model <- lm (score ~ as.numeric(as.character(nmuts)) + as.factor(gender) + as.numeric(as.character(age)) + as.factor(subtype) + as.factor(mut))#
	p.anova <- Anova (mut.model)#
	return (p.anova$'Pr(>F)'[5])#
}#
#
test.no.subtype <- function (mut, score, nmuts, gender, age) {#
	mut.model <- lm (score ~ as.numeric(as.character(nmuts)) + as.factor(gender) + as.numeric(as.character(age)) + as.factor(mut))#
	p.anova <- Anova (mut.model)#
	return (p.anova$'Pr(>F)'[4])#
}#
#
test.ov <- function (mut, score, nmuts, age) {#
	mut.model <- lm (score ~ as.numeric(as.character(nmuts)) + as.numeric(as.character(age)) + as.factor(mut))#
	p.anova <- Anova (mut.model)#
	return (p.anova$'Pr(>F)'[4])#
}#
#
if (n.subtypes > 1) {#
	no_cores <- detectCores() - 1#
	cl <- makeCluster(no_cores, type = "FORK")#
	t.mut.data <- cbind(t.mut.data, p = parApply (cl, t.mut.data, 1, test.all, score, nmuts, gender, age, subtype))#
	stopCluster (cl)#
	t.mut.data <- cbind(t.mut.data, FDR = p.adjust (t.mut.data[,"p"], method = "fdr"))#
} else {#
	if (args[3] == "OV" | args[3] == "TGCT" | args[3] == "UCS" | args[3] == "PRAD") {#
		no_cores <- detectCores() - 1#
		cl <- makeCluster(no_cores, type = "FORK")#
		t.mut.data <- cbind(t.mut.data, p = parApply (cl, t.mut.data, 1, test.ov, score, nmuts, age))#
		stopCluster (cl)#
		t.mut.data <- cbind(t.mut.data, FDR = p.adjust (t.mut.data[,"p"], method = "fdr"))#
	} else {#
		no_cores <- detectCores() - 1#
		cl <- makeCluster(no_cores, type = "FORK")#
		t.mut.data <- cbind(t.mut.data, p = parApply (cl, t.mut.data, 1, test.no.subtype, score, nmuts, gender, age))#
		stopCluster (cl)#
		t.mut.data <- cbind(t.mut.data, FDR = p.adjust (t.mut.data[,"p"], method = "fdr"))#
	}#
}
head (t.mut.data)
mut.data <- read.table ("thomas/review_proteins_positions/final_figures/raw_files/matrix_pancan.txt", sep = "\t", header = TRUE)
nrow(subset (mut.data, NPat > 4 & AllDriver == "No" & MutSigCV > 0.05 & OncodriveFM > 0.05 & Detected >2))
sub.sig <- nrow(subset (mut.data, NPat > 4 & AllDriver == "No" & MutSigCV > 0.05 & OncodriveFM > 0.05 & Detected >2))
head (sub.sig [,!(c ("NPat"))])
head (sub.sig [-which (names (sub.sig) %in% c ("NPat", "KnownDriver", "Mode", "AllDriver", "OncodriveFM", "MutSigCV"))])
head (sub.sig)
sub.sig <- subset (mut.data, NPat > 4 & AllDriver == "No" & MutSigCV > 0.05 & OncodriveFM > 0.05 & Detected >2)
sub.sig [-which (names (sub.sig) %in% c ("NPat", "KnownDriver", "Mode", "AllDriver", "OncodriveFM", "MutSigCV", "Detected", "e.Driver3D"))]
library (ggplot2)#
library (reshape)#
library (gridExtra)#
#
tissues <- c ("blca", "brca", "gbm", "luad")#
#
m.res <- matrix (nrow = 15*5, ncol = 6)#
colnames (m.res) <- c ("Method", "Tissue", "nDetOG", "nDet", "nOG", "nKnown")#
m.res <- as.data.frame (m.res)#
#
for (t in 1:length (tissues)) {#
	file.name <- paste ("../raw_data/matrix_", tissues[t], ".txt", sep = "")#
	pred.data <- read.table (file = file.name, sep = "\t", header = TRUE, check.names = FALSE)#
	pred.melt <- melt (subset (pred.data, NPat > 4))#
#
	sub.analyze <- subset (pred.melt, !(variable %in% c ("NPat", "Group", "Detected")))#
	methods <- unique (sub.analyze$variable)#
#
	for (i in 1:length(methods)) {#
		sub.m <- subset (sub.analyze, variable == methods[i])#
		og.detected <- nrow (subset (sub.m, Mode %in% c ("OG", "OG/TSG") & value < 0.05 & KnownDriver == 'Yes'))#
		total.detected <- nrow (subset (sub.m, value < 0.05 & KnownDriver == 'Yes'))#
		total.og <- nrow (subset (sub.m, Mode %in% c ("OG", "OG/TSG") & KnownDriver == 'Yes'))#
		total.known <- nrow (subset (sub.m, KnownDriver == "Yes"))#
		m.res[i + (15 * (t-1)),1] <- as.character (methods[i])#
		m.res[i + (15 * (t-1)),2] <- as.character (tissues[t])#
		m.res[i + (15 * (t-1)),3] <- og.detected#
		m.res[i + (15 * (t-1)),4] <- total.detected#
		m.res[i + (15 * (t-1)),5] <- total.og#
		m.res[i + (15 * (t-1)),6] <- total.known#
	}#
}#
#
for (i in 1:length(methods)) {#
	sub.m <- subset (m.res, Method == as.character (methods[i]))#
	og.detected <- sum (sub.m$nDetOG)#
	total.detected <- sum (sub.m$nDet)#
	total.og <- sum (sub.m$nOG)#
	total.known <- sum (sub.m$nKnown)#
	m.res[i + (15 * (4)),1] <- as.character (methods[i])#
	m.res[i + (15 * (4)),2] <- "Pancan"#
	m.res[i + (15 * (4)),3] <- og.detected#
	m.res[i + (15 * (4)),4] <- total.detected#
	m.res[i + (15 * (4)),5] <- total.og#
	m.res[i + (15 * (4)),6] <- total.known#
}#
#
calc.fish <- function (n11, n12, n21, n22) {#
	m <- matrix (nrow = 2,, ncol = 2)#
	m[1,1] <- n11#
	m[1,2] <- n12 - n11#
	m[2,1] <- n21 - n11#
	m[2,2] <- n22 - n12 - n21 + 11#
	result <- fisher.test (m, alternative = "greater")#
 	return (result$p.value)#
}#
#
calc.or <- function (n11, n12, n21, n22) {#
	m <- matrix (nrow = 2,, ncol = 2)#
	m[1,1] <- n11#
	m[1,2] <- n12 - n11#
	m[2,1] <- n21 - n11#
	m[2,2] <- n22 - n12 - n21 + 11#
	m <- m+1#
	result <- fisher.test (m, alternative = "greater")#
	if (abs (log10(result$conf.int[1])) < abs(log10(result$conf.int[2]))) {#
		return (result$conf.int[1])#
	} else {#
		return (result$conf.int[2])#
	}#
}#
#
m.res$p <- mapply (calc.fish, m.res$nDetOG, m.res$nDet, m.res$nOG, m.res$nKnown)#
m.res$AdjP <- ifelse (m.res$p < 1e-5, 1e-5, m.res$p)#
m.res$sig <- ifelse (m.res$p < 0.05, "Yes", "No")#
m.res$OR <- mapply (calc.or, m.res$nDetOG, m.res$nDet, m.res$nOG, m.res$nKnown)#
#
m.res$Method <- factor (m.res$Method, levels = c ("MutSigCV", "OncodriveFM", "Hotspot", "OncodriveCLUST", "NMC", "MutSig-CL", "iSIMPRe", "iPAC", "GraphPAC", "SpacePAC", "CLUMPS", "e-Driver", "ActiveDriver", "LowMACA", "e-Driver3D"))#
m.res$Tissue <- factor (m.res$Tissue, levels = c ("blca", "brca", "gbm", "luad", "Pancan"), labels = c ("BLCA", "BRCA", "GBM", "LUAD", "Pancan"))#
#
pred.data <- read.table ("../raw_data/matrix_pancan.txt", header = TRUE, check.names = FALSE, sep = "\t")#
pred.melt <- melt (subset (pred.data, NPat > 4))#
#
sub.analyze <- subset (pred.melt, !(variable %in% c ("NPat", "Group", "Detected")))#
sub.analyze$variable <- factor (sub.analyze$variable, levels = c ("MutSigCV", "OncodriveFM", "Hotspot", "OncodriveCLUST", "NMC", "MutSig-CL", "iSIMPRe", "iPAC", "GraphPAC", "SpacePAC", "CLUMPS", "e-Driver", "ActiveDriver", "LowMACA", "e-Driver3D"))#
sub.analyze$Mode <- factor (sub.analyze$Mode, levels = c ("OG", "TSG", "OG/TSG", "Unk", "N/A"), labels = c ("OG", "TSG", "OG/TSG", "Unknown", "N/A"))#
#
sub.analyze$Tissue <- factor (sub.analyze$Tissue, levels = c ("blca", "brca", "gbm", "luad"), labels = c ("BLCA", "BRCA", "GBM", "LUAD"))#
#
plot.1 <- ggplot (subset (sub.analyze, value < 0.05), aes (x = variable, fill = Mode)) + geom_bar (position = "fill", color = "black") + theme (axis.text = element_text (color = "black"), axis.ticks = element_line (color = "black"), axis.ticks.x = element_line (color = "black"), axis.line.x = element_line (color = "black"), axis.line.y = element_line (color = "black"), axis.title.y = element_text (face = "italic"), panel.background = element_blank(), legend.position = "bottom", axis.text.x = element_text (angle = 45, hjust = 1, vjust = 1), axis.title.x = element_blank()) + ylab ("Fraction of genes") + scale_y_continuous (labels = scales::percent) + scale_fill_manual (values = c ("#FFBB00", "#375E97", "#3F681C", "#DDC5A2", "white")) + facet_wrap (~Tissue, ncol = 2) + theme (strip.background = element_blank(), strip.text = element_text (face = "italic"))#
plot.2 <- ggplot (subset (m.res, nDetOG > 0 & Tissue == "Pancan"), aes (x = Method, y = OR)) + geom_bar (stat = "identity", aes (alpha = sig, fill = sig), color = "black") + theme (axis.text.x = element_text (angle = 45, hjust = 1)) + geom_hline (yintercept = 1, linetype = 2, color = "black") + theme (panel.background = element_blank(), axis.text = element_text (color = "black"), axis.ticks = element_line (color = "black"), axis.line.x = element_line (color = "black"), axis.line.y = element_line (color = "black"), axis.title.x = element_blank(), axis.title.y = element_text (face = "italic"), legend.position = "right") + ylab ("Oncogene/dual role\n fold enrichment\n") + scale_alpha_manual (values = c (0.3, 1), name = "p < 0.05") + scale_fill_manual (values = c ("lightgray", "#FFBB00"), name = "p < 0.05")#
grid.arrange (plot.1, plot.2, ncol = 1, heights = c (5,3))
mut.data <- read.table ("github/sub-gene_resolution/raw_data/matrix_blca.txt", sep = "\t", header = TRUE, check.names = FALSE)
head (mut.data)
dim (mut.data)
write.table (sub.4, "github/sub-gene_resolution/raw_data/blca_matrix.txt", sep = "\t", quote=FALSE, row.names=FALSE, col.names=TRUE)
write.table (sub.4, "github/sub-gene_resolution/raw_data/brca_matrix.txt", sep = "\t", quote=FALSE, row.names=FALSE, col.names=TRUE)
mut.data <- read.table ("github/sub-gene_resolution/previous/matrix_gbm.txt", sep = "\t", header = TRUE, check.names = FALSE)
write.table (sub.4, "github/sub-gene_resolution/raw_data/matrix_gbm.txt", sep = "\t", quote=FALSE, row.names=FALSE, col.names=TRUE)
mut.data <- read.table ("github/sub-gene_resolution/previous/matrix_luad.txt", sep = "\t", header = TRUE, check.names = FALSE)
write.table (sub.4, "github/sub-gene_resolution/raw_data/matrix_luad.txt", sep = "\t", quote=FALSE, row.names=FALSE, col.names=TRUE)
mut.data <- read.table ("github/sub-gene_resolution/previous/matrix_brca.txt", sep = "\t", header = TRUE, check.names = FALSE)
mut.data <- read.table ("../previous/matrix_brca.txt", sep = "\t", header = TRUE, check.names = FALSE)
sub.4 <- subset (mut.data, NPat > 4)
write.table (sub.4, "../raw_data/matrix_brca.txt", sep = "\t", quote=FALSE, row.names=FALSE, col.names=TRUE)
library (ggplot2)#
library (reshape)#
library (gridExtra)#
#
#THIS IS PART "E" OF THE PLOT#
#
#THIS IS A FUNCTION THAT EXTRACTS THE LEGEND FROM A GGPLOT#
#TOOK IT FROM https://github.com/hadley/ggplot2/wiki/Share-a-legend-between-two-ggplot2-graphs#
#
g_legend<-function(a.gplot){#
  tmp <- ggplot_gtable(ggplot_build(a.gplot))#
  leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")#
  legend <- tmp$grobs[[leg]]#
  return(legend)}#
#
#BLCA#
#
pred.data <- read.table (file = "../raw_data/matrix_blca.txt", sep = "\t", header = TRUE, check.names = FALSE)#
pred.melt <- melt (subset (pred.data, NPat > 4))#
sub.analyze <- subset (pred.melt, !(variable %in% c ("NPat", "Group", "Detected")))#
#
sub.analyze$AllDriver <- factor (sub.analyze$AllDriver, levels = c ("Missense somatic drivers in matching tissue",  "Missense somatic drivers in other tissues", "Other somatic drivers in other tissues", "Other somatic drivers in matching tissue", "Other germline drivers in other tissues", "No"))#
sub.analyze$variable <- factor (sub.analyze$variable, levels = c ("MutSigCV", "OncodriveFM", "Hotspot", "OncodriveCLUST", "NMC", "MutSig-CL", "iSIMPRe", "iPAC", "GraphPAC", "SpacePAC", "CLUMPS", "e-Driver", "ActiveDriver", "LowMACA", "e-Driver3D"))#
#
sub.blca.plot <- subset (sub.analyze, value < 0.05)#
blca.plot <- ggplot (sub.blca.plot, aes (x = variable)) + geom_bar (position = "fill", aes (fill = AllDriver), color = "black") + theme (axis.text = element_text (color = "black"), axis.ticks.y = element_line (color = "black"), axis.ticks.x = element_blank(), axis.line.x = element_line (color = "black"), axis.line.y = element_line (color = "black"), panel.background = element_blank(), axis.text.x = element_blank(), legend.position = "none", axis.title = element_blank()) + scale_y_continuous (labels = scales::percent) + scale_fill_manual (values = c ("#FE0000", "orange","#2F496E", "#2988BC", "#5CC5EF", "white"), name = "Known driver role?") + ggtitle ("BLCA") + theme (plot.title = element_text (hjust = 0.5, size = 12, face = "italic"))#
#
blca.legend <- ggplot (sub.blca.plot, aes (x = variable)) + geom_bar (position = "fill", aes (fill = AllDriver), color = "black") + theme (axis.text = element_text (color = "black"), axis.ticks = element_line (color = "black"), axis.line.x = element_line (color = "black"), axis.line.y = element_line (color = "black"), panel.background = element_blank(), axis.text.x = element_text (angle = 45, hjust = 1), legend.position = "right", axis.title = element_blank()) + scale_y_continuous (labels = scales::percent) + scale_fill_manual (values = c ("#FE0000", "orange","#2F496E", "#2988BC", "#5CC5EF", "white"), name = "Known driver role?") + ggtitle ("BLCA") + theme (plot.title = element_text (hjust = 0.5, size = 12, face = "italic"))#
plot.legend <- g_legend (blca.legend)#
#
#NOW BRCA#
#
pred.data <- read.table (file = ".../raw_data/matrix_brca.txt", sep = "\t", header = TRUE, check.names = FALSE)#
pred.melt <- melt (subset (pred.data, NPat > 4))#
sub.analyze <- subset (pred.melt, !(variable %in% c ("NPat", "Group", "Detected")))#
#
sub.analyze$AllDriver <- factor (sub.analyze$AllDriver, levels = c ("Missense somatic drivers in matching tissue",  "Missense somatic drivers in other tissues", "Other somatic drivers in other tissues", "Other somatic drivers in matching tissue", "Other germline drivers in other tissues", "No"))#
sub.analyze$variable <- factor (sub.analyze$variable, levels = c ("MutSigCV", "OncodriveFM", "Hotspot", "OncodriveCLUST", "NMC", "MutSig-CL", "iSIMPRe", "iPAC", "GraphPAC", "SpacePAC", "CLUMPS", "e-Driver", "ActiveDriver", "LowMACA", "e-Driver3D"))#
#
sub.brca.plot <- subset (sub.analyze, value < 0.05)#
#brca.plot <- ggplot (sub.brca.plot, aes (x = variable)) + geom_bar (position = "fill", aes (fill = AllDriver), color = "black") + theme (axis.text = element_text (color = "black"), axis.ticks = element_line (color = "black"), axis.line.x = element_line (color = "black"), axis.line.y = element_line (color = "black"), panel.background = element_blank(), axis.text.x = element_text (angle = 45, hjust = 1), legend.position = "none", axis.title = element_blank()) + scale_y_continuous (labels = scales::percent) + scale_fill_manual (values = c ("#FE0000", "orange","#2F496E", "#2988BC", "#5CC5EF", "white"), name = "Known driver role?") + ggtitle ("BRCA") + theme (plot.title = element_text (hjust = 0.5, size = 12, face = "italic"))#
brca.plot <- ggplot (sub.brca.plot, aes (x = variable)) + geom_bar (position = "fill", aes (fill = AllDriver), color = "black") + theme (axis.text = element_text (color = "black"), axis.ticks.y = element_line (color = "black"), axis.ticks.x = element_blank(), axis.line.x = element_line (color = "black"), axis.line.y = element_line (color = "black"), panel.background = element_blank(), axis.text.x = element_blank(), legend.position = "none", axis.title = element_blank()) + scale_y_continuous (labels = scales::percent) + scale_fill_manual (values = c ("#FE0000", "orange","#2F496E", "#2988BC", "#5CC5EF", "white"), name = "Known driver role?") + ggtitle ("BRCA") + theme (plot.title = element_text (hjust = 0.5, size = 12, face = "italic"))#
#
#NOW GBM#
#
pred.data <- read.table (file = "../raw_data/matrix_gbm.txt", sep = "\t", header = TRUE, check.names = FALSE)#
pred.melt <- melt (subset (pred.data, NPat > 4))#
sub.analyze <- subset (pred.melt, !(variable %in% c ("NPat", "Group", "Detected")))#
#
sub.analyze$AllDriver <- factor (sub.analyze$AllDriver, levels = c ("Missense somatic drivers in matching tissue",  "Missense somatic drivers in other tissues", "Other somatic drivers in other tissues", "Other somatic drivers in matching tissue", "Other germline drivers in other tissues", "No"))#
sub.analyze$variable <- factor (sub.analyze$variable, levels = c ("MutSigCV", "OncodriveFM", "Hotspot", "OncodriveCLUST", "NMC", "MutSig-CL", "iSIMPRe", "iPAC", "GraphPAC", "SpacePAC", "CLUMPS", "e-Driver", "ActiveDriver", "LowMACA", "e-Driver3D"))#
#
sub.gbm.plot <- subset (sub.analyze, value < 0.05)#
#gbm.plot <- ggplot (sub.gbm.plot, aes (x = variable)) + geom_bar (position = "fill", aes (fill = AllDriver), color = "black") + theme (axis.text = element_text (color = "black"), axis.ticks = element_line (color = "black"), axis.line.x = element_line (color = "black"), axis.line.y = element_line (color = "black"), panel.background = element_blank(), axis.text.x = element_text (angle = 45, hjust = 1), legend.position = "none", axis.title = element_blank()) + scale_y_continuous (labels = scales::percent) + scale_fill_manual (values = c ("#FE0000","orange", "#2988BC", "white"), name = "Known driver role?")  + ggtitle ("GBM") + theme (plot.title = element_text (hjust = 0.5, size = 12, face = "italic"))#
gbm.plot <- ggplot (sub.gbm.plot, aes (x = variable)) + geom_bar (position = "fill", aes (fill = AllDriver), color = "black") + theme (axis.text = element_text (color = "black"), axis.ticks.y = element_line (color = "black"), axis.ticks.x = element_blank(), axis.line.x = element_line (color = "black"), axis.line.y = element_line (color = "black"), panel.background = element_blank(), axis.text.x = element_blank(), legend.position = "none", axis.title = element_blank()) + scale_y_continuous (labels = scales::percent) + scale_fill_manual (values = c ("#FE0000","orange", "#2988BC", "white"), name = "Known driver role?")  + ggtitle ("GBM") + theme (plot.title = element_text (hjust = 0.5, size = 12, face = "italic"))#
#
#NOW LUAD#
#
pred.data <- read.table (file = "../raw_data/matrix_luad.txt", sep = "\t", header = TRUE, check.names = FALSE)#
pred.melt <- melt (subset (pred.data, NPat > 4))#
sub.analyze <- subset (pred.melt, !(variable %in% c ("NPat", "Group", "Detected")))#
#
sub.analyze$AllDriver <- factor (sub.analyze$AllDriver, levels = c ("Missense somatic drivers in matching tissue",  "Missense somatic drivers in other tissues", "Other somatic drivers in other tissues", "Other somatic drivers in matching tissue", "Other germline drivers in other tissues", "No"))#
sub.analyze$variable <- factor (sub.analyze$variable, levels = c ("MutSigCV", "OncodriveFM", "Hotspot", "OncodriveCLUST", "NMC", "MutSig-CL", "iSIMPRe", "iPAC", "GraphPAC", "SpacePAC", "CLUMPS", "e-Driver", "ActiveDriver", "LowMACA", "e-Driver3D"))#
#
sub.luad.plot <- subset (sub.analyze, value < 0.05)#
luad.plot <- ggplot (sub.luad.plot, aes (x = variable)) + geom_bar (position = "fill", aes (fill = AllDriver), color = "black") + theme (axis.text = element_text (color = "black"), axis.ticks = element_line (color = "black"), axis.line.x = element_line (color = "black"), axis.line.y = element_line (color = "black"), panel.background = element_blank(), axis.text.x = element_text (angle = 45, hjust = 1), legend.position = "none", axis.title = element_blank()) + scale_y_continuous (labels = scales::percent) + scale_fill_manual (values = c ("#FE0000", "orange", "#2F496E", "#5CC5EF", "white"), name = "Known driver role?") + ggtitle ("LUAD") + theme (plot.title = element_text (hjust = 0.5, size = 12, face = "italic"))#
#
#PUT IT TOGETHER#
#
grid.arrange (arrangeGrob (blca.plot, brca.plot, gbm.plot, luad.plot, ncol = 1, heights = c (3,3,3,5)), plot.legend, ncol = 2, widths = c (3,2))
dim (sub.4)
pred.data <- read.table (file = ".../raw_data/matrix_brca.txt", sep = "\t", header = TRUE, check.names = FALSE)#
pred.melt <- melt (subset (pred.data, NPat > 4))#
sub.analyze <- subset (pred.melt, !(variable %in% c ("NPat", "Group", "Detected")))#
#
sub.analyze$AllDriver <- factor (sub.analyze$AllDriver, levels = c ("Missense somatic drivers in matching tissue",  "Missense somatic drivers in other tissues", "Other somatic drivers in other tissues", "Other somatic drivers in matching tissue", "Other germline drivers in other tissues", "No"))#
sub.analyze$variable <- factor (sub.analyze$variable, levels = c ("MutSigCV", "OncodriveFM", "Hotspot", "OncodriveCLUST", "NMC", "MutSig-CL", "iSIMPRe", "iPAC", "GraphPAC", "SpacePAC", "CLUMPS", "e-Driver", "ActiveDriver", "LowMACA", "e-Driver3D"))#
#
sub.brca.plot <- subset (sub.analyze, value < 0.05)#
brca.plot <- ggplot (sub.brca.plot, aes (x = variable)) + geom_bar (position = "fill", aes (fill = AllDriver), color = "black") + theme (axis.text = element_text (color = "black"), axis.ticks.y = element_line (color = "black"), axis.ticks.x = element_blank(), axis.line.x = element_line (color = "black"), axis.line.y = element_line (color = "black"), panel.background = element_blank(), axis.text.x = element_blank(), legend.position = "none", axis.title = element_blank()) + scale_y_continuous (labels = scales::percent) + scale_fill_manual (values = c ("#FE0000", "orange","#2F496E", "#2988BC", "#5CC5EF", "white"), name = "Known driver role?") + ggtitle ("BRCA") + theme (plot.title = element_text (hjust = 0.5, size = 12, face = "italic"))
bca.plot
pred.data <- read.table (file = ".../raw_data/matrix_brca.txt", sep = "\t", header = TRUE, check.names = FALSE)#
pred.melt <- melt (subset (pred.data, NPat > 4))#
sub.analyze <- subset (pred.melt, !(variable %in% c ("NPat", "Group", "Detected")))#
#
sub.analyze$AllDriver <- factor (sub.analyze$AllDriver, levels = c ("Missense somatic drivers in matching tissue",  "Missense somatic drivers in other tissues", "Other somatic drivers in other tissues", "Other somatic drivers in matching tissue", "Other germline drivers in other tissues", "No"))#
sub.analyze$variable <- factor (sub.analyze$variable, levels = c ("MutSigCV", "OncodriveFM", "Hotspot", "OncodriveCLUST", "NMC", "MutSig-CL", "iSIMPRe", "iPAC", "GraphPAC", "SpacePAC", "CLUMPS", "e-Driver", "ActiveDriver", "LowMACA", "e-Driver3D"))#
#
sub.brca.plot <- subset (sub.analyze, value < 0.05)#
brca.plot <- ggplot (sub.brca.plot, aes (x = variable)) + geom_bar (position = "fill", aes (fill = AllDriver), color = "black") + theme (axis.text = element_text (color = "black"), axis.ticks.y = element_line (color = "black"), axis.ticks.x = element_blank(), axis.line.x = element_line (color = "black"), axis.line.y = element_line (color = "black"), panel.background = element_blank(), axis.text.x = element_blank(), legend.position = "none", axis.title = element_blank()) + scale_y_continuous (labels = scales::percent) + scale_fill_manual (values = c ("#FE0000", "orange","#2F496E", "#2988BC", "white"), name = "Known driver role?") + ggtitle ("BRCA") + theme (plot.title = element_text (hjust = 0.5, size = 12, face = "italic"))
pred.data <- read.table (file = "../raw_data/matrix_brca.txt", sep = "\t", header = TRUE, check.names = FALSE)#
pred.melt <- melt (subset (pred.data, NPat > 4))#
sub.analyze <- subset (pred.melt, !(variable %in% c ("NPat", "Group", "Detected")))#
#
sub.analyze$AllDriver <- factor (sub.analyze$AllDriver, levels = c ("Missense somatic drivers in matching tissue",  "Missense somatic drivers in other tissues", "Other somatic drivers in other tissues", "Other somatic drivers in matching tissue", "Other germline drivers in other tissues", "No"))#
sub.analyze$variable <- factor (sub.analyze$variable, levels = c ("MutSigCV", "OncodriveFM", "Hotspot", "OncodriveCLUST", "NMC", "MutSig-CL", "iSIMPRe", "iPAC", "GraphPAC", "SpacePAC", "CLUMPS", "e-Driver", "ActiveDriver", "LowMACA", "e-Driver3D"))#
#
sub.brca.plot <- subset (sub.analyze, value < 0.05)#
brca.plot <- ggplot (sub.brca.plot, aes (x = variable)) + geom_bar (position = "fill", aes (fill = AllDriver), color = "black") + theme (axis.text = element_text (color = "black"), axis.ticks.y = element_line (color = "black"), axis.ticks.x = element_blank(), axis.line.x = element_line (color = "black"), axis.line.y = element_line (color = "black"), panel.background = element_blank(), axis.text.x = element_blank(), legend.position = "none", axis.title = element_blank()) + scale_y_continuous (labels = scales::percent) + scale_fill_manual (values = c ("#FE0000", "orange","#2F496E", "#2988BC", "white"), name = "Known driver role?") + ggtitle ("BRCA") + theme (plot.title = element_text (hjust = 0.5, size = 12, face = "italic"))
brca.plot
library (ggplot2)#
library (reshape)#
library (gridExtra)#
#
#THIS IS PART "E" OF THE PLOT#
#
#THIS IS A FUNCTION THAT EXTRACTS THE LEGEND FROM A GGPLOT#
#TOOK IT FROM https://github.com/hadley/ggplot2/wiki/Share-a-legend-between-two-ggplot2-graphs#
#
g_legend<-function(a.gplot){#
  tmp <- ggplot_gtable(ggplot_build(a.gplot))#
  leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")#
  legend <- tmp$grobs[[leg]]#
  return(legend)}#
#
#BLCA#
#
pred.data <- read.table (file = "../raw_data/matrix_blca.txt", sep = "\t", header = TRUE, check.names = FALSE)#
pred.melt <- melt (subset (pred.data, NPat > 4))#
sub.analyze <- subset (pred.melt, !(variable %in% c ("NPat", "Group", "Detected")))#
#
sub.analyze$AllDriver <- factor (sub.analyze$AllDriver, levels = c ("Missense somatic drivers in matching tissue",  "Missense somatic drivers in other tissues", "Other somatic drivers in other tissues", "Other somatic drivers in matching tissue", "Other germline drivers in other tissues", "No"))#
sub.analyze$variable <- factor (sub.analyze$variable, levels = c ("MutSigCV", "OncodriveFM", "Hotspot", "OncodriveCLUST", "NMC", "MutSig-CL", "iSIMPRe", "iPAC", "GraphPAC", "SpacePAC", "CLUMPS", "e-Driver", "ActiveDriver", "LowMACA", "e-Driver3D"))#
#
sub.blca.plot <- subset (sub.analyze, value < 0.05)#
blca.plot <- ggplot (sub.blca.plot, aes (x = variable)) + geom_bar (position = "fill", aes (fill = AllDriver), color = "black") + theme (axis.text = element_text (color = "black"), axis.ticks.y = element_line (color = "black"), axis.ticks.x = element_blank(), axis.line.x = element_line (color = "black"), axis.line.y = element_line (color = "black"), panel.background = element_blank(), axis.text.x = element_blank(), legend.position = "none", axis.title = element_blank()) + scale_y_continuous (labels = scales::percent) + scale_fill_manual (values = c ("#FE0000", "orange","#2F496E", "#2988BC", "#5CC5EF", "white"), name = "Known driver role?") + ggtitle ("BLCA") + theme (plot.title = element_text (hjust = 0.5, size = 12, face = "italic"))#
#
blca.legend <- ggplot (sub.blca.plot, aes (x = variable)) + geom_bar (position = "fill", aes (fill = AllDriver), color = "black") + theme (axis.text = element_text (color = "black"), axis.ticks = element_line (color = "black"), axis.line.x = element_line (color = "black"), axis.line.y = element_line (color = "black"), panel.background = element_blank(), axis.text.x = element_text (angle = 45, hjust = 1), legend.position = "right", axis.title = element_blank()) + scale_y_continuous (labels = scales::percent) + scale_fill_manual (values = c ("#FE0000", "orange","#2F496E", "#2988BC", "#5CC5EF", "white"), name = "Known driver role?") + ggtitle ("BLCA") + theme (plot.title = element_text (hjust = 0.5, size = 12, face = "italic"))#
plot.legend <- g_legend (blca.legend)#
#
#NOW BRCA#
#
pred.data <- read.table (file = "../raw_data/matrix_brca.txt", sep = "\t", header = TRUE, check.names = FALSE)#
pred.melt <- melt (subset (pred.data, NPat > 4))#
sub.analyze <- subset (pred.melt, !(variable %in% c ("NPat", "Group", "Detected")))#
#
sub.analyze$AllDriver <- factor (sub.analyze$AllDriver, levels = c ("Missense somatic drivers in matching tissue",  "Missense somatic drivers in other tissues", "Other somatic drivers in other tissues", "Other somatic drivers in matching tissue", "Other germline drivers in other tissues", "No"))#
sub.analyze$variable <- factor (sub.analyze$variable, levels = c ("MutSigCV", "OncodriveFM", "Hotspot", "OncodriveCLUST", "NMC", "MutSig-CL", "iSIMPRe", "iPAC", "GraphPAC", "SpacePAC", "CLUMPS", "e-Driver", "ActiveDriver", "LowMACA", "e-Driver3D"))#
#
sub.brca.plot <- subset (sub.analyze, value < 0.05)#
brca.plot <- ggplot (sub.brca.plot, aes (x = variable)) + geom_bar (position = "fill", aes (fill = AllDriver), color = "black") + theme (axis.text = element_text (color = "black"), axis.ticks.y = element_line (color = "black"), axis.ticks.x = element_blank(), axis.line.x = element_line (color = "black"), axis.line.y = element_line (color = "black"), panel.background = element_blank(), axis.text.x = element_blank(), legend.position = "none", axis.title = element_blank()) + scale_y_continuous (labels = scales::percent) + scale_fill_manual (values = c ("#FE0000", "orange","#2F496E", "#2988BC", "#5CC5EF", "white"), name = "Known driver role?") + ggtitle ("BRCA") + theme (plot.title = element_text (hjust = 0.5, size = 12, face = "italic"))#
#
#NOW GBM#
#
pred.data <- read.table (file = "../raw_data/matrix_gbm.txt", sep = "\t", header = TRUE, check.names = FALSE)#
pred.melt <- melt (subset (pred.data, NPat > 4))#
sub.analyze <- subset (pred.melt, !(variable %in% c ("NPat", "Group", "Detected")))#
#
sub.analyze$AllDriver <- factor (sub.analyze$AllDriver, levels = c ("Missense somatic drivers in matching tissue",  "Missense somatic drivers in other tissues", "Other somatic drivers in other tissues", "Other somatic drivers in matching tissue", "Other germline drivers in other tissues", "No"))#
sub.analyze$variable <- factor (sub.analyze$variable, levels = c ("MutSigCV", "OncodriveFM", "Hotspot", "OncodriveCLUST", "NMC", "MutSig-CL", "iSIMPRe", "iPAC", "GraphPAC", "SpacePAC", "CLUMPS", "e-Driver", "ActiveDriver", "LowMACA", "e-Driver3D"))#
#
sub.gbm.plot <- subset (sub.analyze, value < 0.05)#
gbm.plot <- ggplot (sub.gbm.plot, aes (x = variable)) + geom_bar (position = "fill", aes (fill = AllDriver), color = "black") + theme (axis.text = element_text (color = "black"), axis.ticks.y = element_line (color = "black"), axis.ticks.x = element_blank(), axis.line.x = element_line (color = "black"), axis.line.y = element_line (color = "black"), panel.background = element_blank(), axis.text.x = element_blank(), legend.position = "none", axis.title = element_blank()) + scale_y_continuous (labels = scales::percent) + scale_fill_manual (values = c ("#FE0000","orange", "#2988BC", "white"), name = "Known driver role?")  + ggtitle ("GBM") + theme (plot.title = element_text (hjust = 0.5, size = 12, face = "italic"))#
#
#NOW LUAD#
#
pred.data <- read.table (file = "../raw_data/matrix_luad.txt", sep = "\t", header = TRUE, check.names = FALSE)#
pred.melt <- melt (subset (pred.data, NPat > 4))#
sub.analyze <- subset (pred.melt, !(variable %in% c ("NPat", "Group", "Detected")))#
#
sub.analyze$AllDriver <- factor (sub.analyze$AllDriver, levels = c ("Missense somatic drivers in matching tissue",  "Missense somatic drivers in other tissues", "Other somatic drivers in other tissues", "Other somatic drivers in matching tissue", "Other germline drivers in other tissues", "No"))#
sub.analyze$variable <- factor (sub.analyze$variable, levels = c ("MutSigCV", "OncodriveFM", "Hotspot", "OncodriveCLUST", "NMC", "MutSig-CL", "iSIMPRe", "iPAC", "GraphPAC", "SpacePAC", "CLUMPS", "e-Driver", "ActiveDriver", "LowMACA", "e-Driver3D"))#
#
sub.luad.plot <- subset (sub.analyze, value < 0.05)#
luad.plot <- ggplot (sub.luad.plot, aes (x = variable)) + geom_bar (position = "fill", aes (fill = AllDriver), color = "black") + theme (axis.text = element_text (color = "black"), axis.ticks = element_line (color = "black"), axis.line.x = element_line (color = "black"), axis.line.y = element_line (color = "black"), panel.background = element_blank(), axis.text.x = element_text (angle = 45, hjust = 1), legend.position = "none", axis.title = element_blank()) + scale_y_continuous (labels = scales::percent) + scale_fill_manual (values = c ("#FE0000", "orange", "#2F496E", "#5CC5EF", "white"), name = "Known driver role?") + ggtitle ("LUAD") + theme (plot.title = element_text (hjust = 0.5, size = 12, face = "italic"))#
#
#PUT IT TOGETHER#
#
grid.arrange (arrangeGrob (blca.plot, brca.plot, gbm.plot, luad.plot, ncol = 1, heights = c (3,3,3,5)), plot.legend, ncol = 2, widths = c (3,2))
library (ggplot2)#
library (reshape)#
library (reshape2)#
library (pheatmap)#
#
#THE SCRIPT STORES THE VALUES IN THIS MATRIX#
m.res <- matrix (nrow = 15*4, ncol = 4)#
colnames (m.res) <- c ("Method", "Precision", "Recall", "Tissue")#
m.res <- as.data.frame (m.res)#
#
#THE SCRIPT ITERATES THROUGH THE DIFFERENT MATRIXES AND CALCULATES THE PRECISION AND RECALL VALUES FOR EACH METHOD AND CATEGORY#
tissues <- c ("blca", "brca", "gbm", "luad")#
#
for (t in 1:length (tissues)) {#
	file.name <- paste ("../raw_data/matrix_", tissues[t], ".txt", sep = "")#
	pred.data <- read.table (file = file.name, sep = "\t", header = TRUE, check.names = FALSE)#
	pred.melt <- melt (subset (pred.data, NPat > 4))#
#
	sub.analyze <- subset (pred.melt, !(variable %in% c ("NPat", "Group", "Detected")))#
	methods <- unique (sub.analyze$variable)#
#
	for (i in 1:length(methods)) {#
		sub.m <- subset (sub.analyze, variable == methods[i])#
		true.pos <- nrow (subset (sub.m, KnownDriver == "Yes" & value < 0.05)) #NUMBER OF TRUE POSITIVES BY THE METHOD#
		total.pos <- nrow (subset (sub.m, value < 0.05)) #NUMBER OF POSITIVES IDENTIFIED BY THE METHOD#
		total.true <- nrow (subset (sub.m, KnownDriver == "Yes")) #NUMBER OF TOTAL TRUE GENES#
		m.res[i + (15 * (t-1)),1] <- as.character (methods[i])#
		m.res[i + (15 * (t-1)),2] <- true.pos/total.pos #PRECISION#
		m.res[i + (15 * (t-1)),3] <- true.pos/total.true #RECALL#
		m.res[i + (15 * (t-1)),4] <- as.character (tissues[t])#
	}#
}#
#
#NOW THE SAME PER CATEGORIES#
#
categories <- c ("Whole gene", "Type I", "Type II", "Type III", "Type IV")#
#
for (t in 1:length (tissues)) {#
	file.name <- paste ("../raw_data/matrix_", tissues[t], ".txt", sep = "")#
	pred.data <- read.table (file = file.name, sep = "\t", header = TRUE, check.names = FALSE)#
	pred.melt <- melt (subset (pred.data, NPat > 4))#
#
	sub.analyze <- subset (pred.melt, !(variable %in% c ("NPat", "Group", "Detected")))#
	for (c in 1:length (categories)) {#
		sub.m <- sub.analyze#
		if (categories[c] == "Whole gene") {#
			sub.m <- subset (sub.analyze, variable %in% c("OncodriveFM", "MutSigCV"))#
		}#
		else if (categories[c] == "Type I") {#
			sub.m <- subset (sub.analyze, variable %in% c("MutSig-CL", "OncodriveCLUST", "NMC", "Hotspot", "iSIMPRe"))#
		}#
		else if (categories[c] == "Type II") {#
			sub.m <- subset (sub.analyze, variable %in% c("iPAC", "GraphPAC", "SpacePAC", "CLUMPS"))#
		}#
		else if (categories[c] == "Type III") {#
			sub.m <- subset (sub.analyze, variable %in% c("e-Driver", "ActiveDriver", "LowMACA"))#
		}#
		else if (categories[c] == "Type IV") {#
			sub.m <- subset (sub.analyze, variable %in% c("e-Driver3D"))#
		}#
		true.pos <- nrow (subset (sub.m, KnownDriver == "Yes" & value < 0.05))#
		total.pos <- nrow (subset (sub.m, value < 0.05))#
		total.true <- nrow (subset (sub.m, KnownDriver == "Yes"))#
		m.res[15*4 + 5*(t-1) + c, 1] <- as.character (categories[c])#
		m.res[15*4 + 5*(t-1) + c, 2] <- true.pos/total.pos#
		m.res[15*4 + 5*(t-1) + c, 3] <- true.pos/total.true#
		m.res[15*4 + 5*(t-1) + c, 4] <- as.character (tissues[t])#
	}#
}#
#
m.res$Tissue <- factor (m.res$Tissue, levels = c ("blca", "brca", "gbm", "luad"), labels = c ("BLCA", "BRCA", "GBM", "LUAD"))#
#
#HEATMAP METHODS#
#
bk2 = unique(c(seq(0, 1, length=50)))#
col1 <- colorRampPalette (c ("#4CB5F5", "white"))(15)#
col2 <- colorRampPalette(c("white", "#F62A00"))(35)#
#
#FIG 3A#
recall.data <- acast (subset (m.res, Method %in% c ("Whole gene", "Type I", "Type II", "Type III", "Type IV")), Method ~ Tissue, value.var = "Recall")#
pheatmap (recall.data, main = "Recall\n", breaks = bk2, color = c (col1, col2))#
#
#FIG 3B#
precision.data <- acast (subset (m.res, Method %in% c ("Whole gene", "Type I", "Type II", "Type III", "Type IV")), Method ~ Tissue, value.var = "Precision")#
pheatmap (precision.data, main = "Precision\n", breaks = bk2, color = c (col1, col2))#
#
#FIG 3C#
recall.data <- acast (subset (m.res, !(Method %in% c ("Whole gene", "Type I", "Type II", "Type III", "Type IV"))), Method ~ Tissue, value.var = "Recall")#
pheatmap (recall.data, main = "Recall\n", breaks = bk2, color = c (col1, col2))#
#
#FIG 3D#
precision.data <- acast (subset (m.res, !(Method %in% c ("Whole gene", "Type I", "Type II", "Type III", "Type IV"))), Method ~ Tissue, value.var = "Precision")#
pheatmap (precision.data, main = "Precision\n", breaks = bk2, color = c (col1, col2))
